<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
    "http://struts.apache.org/dtds/struts-2.0.dtd">

<struts>
	<include file="struts-default.xml" />
	<include file="struts-audit.xml" />
	<include file="struts-security.xml" />
	<include file="struts-application.xml" />

	<package name="default" extends="struts-default">
		<result-types>
			<result-type name="chain" class="org.vulpe.view.struts.result.SessionActionChainResult" />
			<result-type name="jasper" class="org.apache.struts2.views.jasperreports.JasperReportsResult" />
		</result-types>

		<interceptors>
			<!-- file upload interceptor -->
			<interceptor name="fileUpload" class="org.vulpe.controller.struts.interceptor.VulpeUploadInterceptor" />

			<!-- exception interceptor -->
			<interceptor name="exception"
				class="org.vulpe.controller.struts.interceptor.VulpeExceptionMappingInterceptor" />

			<!-- chain interceptor -->
			<interceptor name="chain" class="org.vulpe.controller.struts.interceptor.VulpeChainingInterceptor" />

			<!-- params interceptor -->
			<interceptor name="params"
				class="org.vulpe.controller.struts.interceptor.SessionParametersInterceptor" />

			<!-- params interceptor -->
			<interceptor name="resetSessionParams"
				class="org.vulpe.controller.struts.interceptor.ResetSessionParametersInterceptor" />

			<!-- Basic stack -->
			<interceptor-stack name="basicStack">
				<interceptor-ref name="exception" />
				<interceptor-ref name="servletConfig" />
				<interceptor-ref name="prepare" />
				<interceptor-ref name="checkbox" />
				<interceptor-ref name="params">
					<param name="excludeParams">dojo\..*,^struts\..*</param>
				</interceptor-ref>
				<interceptor-ref name="conversionError" />
				<interceptor-ref name="resetSessionParams" />
			</interceptor-stack>

			<!-- Sample validation and workflow stack -->
			<interceptor-stack name="validationWorkflowStack">
				<interceptor-ref name="basicStack" />
				<interceptor-ref name="validation" />
				<interceptor-ref name="workflow" />
			</interceptor-stack>

			<!-- Sample file upload stack -->
			<interceptor-stack name="fileUploadStack">
				<interceptor-ref name="fileUpload" />
				<interceptor-ref name="basicStack" />
			</interceptor-stack>

			<!-- Sample model-driven stack  -->
			<interceptor-stack name="modelDrivenStack">
				<interceptor-ref name="modelDriven" />
				<interceptor-ref name="basicStack" />
			</interceptor-stack>

			<!-- Sample action chaining stack -->
			<interceptor-stack name="chainStack">
				<interceptor-ref name="chain" />
				<interceptor-ref name="basicStack" />
			</interceptor-stack>

			<!-- Sample i18n stack -->
			<interceptor-stack name="i18nStack">
				<interceptor-ref name="i18n" />
				<interceptor-ref name="basicStack" />
			</interceptor-stack>

			<!--
				An example of the paramsPrepareParams trick. This stack is exactly the same as the defaultStack,
				except that it includes one extra interceptor before the prepare interceptor: the params
				interceptor. This is useful for when you wish to apply parameters directly to an object that you
				wish to load externally (such as a DAO or database or service layer), but can't load that object
				until at least the ID parameter has been loaded. By loading the parameters twice, you can
				retrieve the object in the prepare() method, allowing the second params interceptor to apply the
				values on the object.
			-->
			<interceptor-stack name="paramsPrepareParamsStack">
				<interceptor-ref name="exception" />
				<interceptor-ref name="alias" />
				<interceptor-ref name="i18n" />
				<interceptor-ref name="params">
					<param name="excludeParams">dojo\..*,^struts\..*</param>
				</interceptor-ref>
				<interceptor-ref name="checkbox" />
				<interceptor-ref name="servletConfig" />
				<interceptor-ref name="prepare" />
				<interceptor-ref name="chain" />
				<interceptor-ref name="modelDriven" />
				<interceptor-ref name="fileUpload" />
				<interceptor-ref name="staticParams" />
				<interceptor-ref name="params">
					<param name="excludeParams">dojo\..*,^struts\..*</param>
				</interceptor-ref>
				<interceptor-ref name="conversionError" />
				<interceptor-ref name="validation">
					<param name="excludeMethods">input,back,cancel,browse</param>
				</interceptor-ref>
				<interceptor-ref name="workflow">
					<param name="excludeMethods">input,back,cancel,browse</param>
				</interceptor-ref>
			</interceptor-stack>

			<!--
				A complete stack with all the common interceptors in place. Generally, this stack should be the
				one you use, though it may do more than you need. Also, the ordering can be switched around (ex:
				if you wish to have your servlet-related objects applied before prepare() is called, you'd need
				to move servletConfig interceptor up. This stack also excludes from the normal validation and
				workflow the method names input, back, and cancel. These typically are associated with requests
				that should not be validated.
			-->
			<interceptor-stack name="defaultStack">
				<interceptor-ref name="exception" />
				<interceptor-ref name="alias" />
				<interceptor-ref name="servletConfig" />
				<interceptor-ref name="i18n" />
				<interceptor-ref name="prepare" />
				<interceptor-ref name="chain" />
				<interceptor-ref name="debugging" />
				<interceptor-ref name="profiling" />
				<interceptor-ref name="scopedModelDriven" />
				<interceptor-ref name="modelDriven" />
				<interceptor-ref name="fileUpload" />
				<interceptor-ref name="checkbox" />
				<interceptor-ref name="staticParams" />
				<interceptor-ref name="params">
					<param name="excludeParams">dojo\..*,^struts\..*</param>
				</interceptor-ref>
				<interceptor-ref name="conversionError" />
				<interceptor-ref name="validation">
					<param name="excludeMethods">input,back,cancel,browse</param>
				</interceptor-ref>
				<interceptor-ref name="workflow">
					<param name="excludeMethods">input,back,cancel,browse</param>
				</interceptor-ref>
				<interceptor-ref name="resetSessionParams" />
			</interceptor-stack>

			<!--
				The completeStack is here for backwards compatibility for applications that still refer to the
				defaultStack by the old name
			-->
			<interceptor-stack name="completeStack">
				<interceptor-ref name="defaultStack" />
			</interceptor-stack>

			<!--
				Sample execute and wait stack. Note: execAndWait should always be the *last* interceptor.
			-->
			<interceptor-stack name="executeAndWaitStack">
				<interceptor-ref name="execAndWait">
					<param name="excludeMethods">input,back,cancel</param>
				</interceptor-ref>
				<interceptor-ref name="defaultStack" />
				<interceptor-ref name="execAndWait">
					<param name="excludeMethods">input,back,cancel</param>
				</interceptor-ref>
			</interceptor-stack>
		</interceptors>

		<global-results>
			<result name="upload">/WEB-INF/protected-jsp/commons/upload.jsp</result>
			<result name="report">/WEB-INF/protected-jsp/commons/reportDownload.jsp
			</result>
			<result name="json">/WEB-INF/protected-jsp/commons/json.jsp</result>
			<result name="download" type="stream">
				<param name="contentType">${downloadInfo.contentType}</param>
				<param name="contentLength">${downloadInfo.contentLength}</param>
				<param name="contentDisposition">${downloadInfo.contentDisposition}</param>
				<param name="inputName">downloadInfo.inputStream</param>
			</result>
			<result name="messages">/WEB-INF/protected-jsp/commons/messages.jsp
			</result>
			<result name="errors">layout.vulpe.errors</result>
		</global-results>

		<!-- Back-End -->
		<action name="backend/*" class="backend.{1}" method="backend">
			<result name="success">${resultForward}</result>
			<result name="backend" type="chain">
				<param name="actionName">${resultForward}</param>
				<param name="saveParams">true</param>
				<param name="sendParams">true</param>
				<param name="clearParams">true</param>
			</result>
		</action>

		<action name="backend/*/ajax" class="backend.{1}" method="backend">
			<result name="success">${resultForward}</result>
			<result name="backend" type="chain">
				<param name="actionName">${resultForward}</param>
				<param name="saveParams">true</param>
				<param name="sendParams">true</param>
				<param name="clearParams">true</param>
			</result>
		</action>

		<!-- Front-End -->
		<action name="frontend/*" class="frontend.{1}" method="frontend">
			<result name="success">${resultForward}</result>
			<result name="frontend" type="chain">
				<param name="actionName">${resultForward}</param>
				<param name="saveParams">true</param>
				<param name="sendParams">true</param>
				<param name="clearParams">true</param>
			</result>
		</action>

		<action name="frontend/*/ajax" class="frontend.{1}" method="frontend">
			<result name="success">${resultForward}</result>
			<result name="frontend" type="chain">
				<param name="actionName">${resultForward}</param>
				<param name="saveParams">true</param>
				<param name="sendParams">true</param>
				<param name="clearParams">true</param>
			</result>
		</action>

		<action name="frontend/*/*" class="frontend.{1}" method="{2}">
			<result name="success">${resultForward}</result>
			<result name="read" type="chain">
				<param name="actionName">${resultForward}</param>
				<param name="sendParams">true</param>
				<param name="clearParams">true</param>
			</result>
		</action>

		<action name="frontend/*/*/ajax" class="frontend.{1}" method="{2}">
			<result name="success">${resultForward}</result>
			<result name="read" type="chain">
				<param name="actionName">${resultForward}</param>
				<param name="sendParams">true</param>
				<param name="clearParams">true</param>
			</result>
		</action>

		<action name="*/*/*" class="{1}.{2}Controller" method="{3}">
			<result name="success">${resultForward}</result>
			<result name="create" type="chain">
				<param name="actionName">${resultForward}</param>
				<param name="saveParams">true</param>
			</result>
			<result name="update" type="chain">
				<param name="actionName">${resultForward}</param>
				<param name="saveParams">true</param>
			</result>
			<result name="read" type="chain">
				<param name="actionName">${resultForward}</param>
			</result>
		</action>

		<action name="*/*/*/ajax" class="{1}.{2}Controller" method="{3}">
			<result name="success">${resultForward}</result>
			<result name="create" type="chain">
				<param name="actionName">${resultForward}</param>
				<param name="saveParams">true</param>
			</result>
			<result name="update" type="chain">
				<param name="actionName">${resultForward}</param>
				<param name="saveParams">true</param>
			</result>
			<result name="read" type="chain">
				<param name="actionName">${resultForward}</param>
			</result>
		</action>

	</package>
</struts>